Problem: Parsing expressions after knowing expression type

Case 1: if statements
     - everything inside of { } belongs to if statement
     - read until '}'

Case 2: Loops
    - everything inside of { } belongs to Loops
    - read until '}'

Case 3: Arithemitc
    - line belongs to arithmetic
    - read line

Solutions:
    1. Requires more restructuring
         - read line, check expression type
         - class/function reads remaining lines (if necessary) and handles as needed
            ex.
                // remove the while(getline(...))
                getline(...)
                check_expression(tokens[0])
                if (ET_CONTROL)
                    handleControl() // reads input until '}'
    2. Requires less restructuring (BETTER)
        - read all lines into vector


bne r2, r1, ELSE
add r1, r3, r4

ELSE:
    add r2, r3, r4


if (i == j) {
    f = g + h
}
else {
    f = g - h
}

----------------------

bne $1, $2, condition

condition:

----------------------

step 1: handle base expressions (if ==, while, +/-)
step 2: detect pipeline hazards AND handle pipeline hazards

-> wishlist <-

step 3: expand expression handling
    - ex. if <, a + b * c


string test = "this is my string";

string token = strtok(test, " ");
// returns: this
token = strtok(NULL, " ");
// returns: is
token = strtok(NULL, " ");
// returns: my
token = strtok(NULL, " ");
// returns: string
token = strtok(NULL, " ");
// returns: NULL

string strtok(string in, string del) {
    static string input;
    if (in != NULL)
        input = in; // input = "this is my string"
    
    // get the token
    
    input = input - token; // "is my string"

    return token;
}



// header file
struct ParserData {
    // variables
}

// Public Functions

------------------------------
// cpp file
// private functions



while i < 10:
    a = b + c
    i++

i = $1
a = $2
b = $3
c = $4

// 2 registers needed
if (a == b)

// 1 register needed
if ("abc" == b)
if (a == "abc")

// don't need to handle this
if ("abc" == "abc")


while (i < 10)
    a = a + i++

loop1: 
    bge r1, 10, done
------
    add r2, r2, r1
    add r1, r1, 1
    jmp loop1
------
done: